services:
  db:
    image: mysql:8.0                       
    container_name: db                     
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword    
      MYSQL_USER: myuser                   
      MYSQL_PASSWORD: mypassword           
      MYSQL_DATABASE: dsbd_db              
    healthcheck:  
      test: ["CMD-SHELL", "mysql -h 127.0.0.1 -u myuser -pmypassword -e 'SELECT 1'"] #faccio healthcheck con una query di test
      interval: 20s                                                                   #in modo tale da dire a server e dc quando partire
      timeout: 10s    
      retries: 5
    volumes:
      - db_data:/var/lib/mysql             
    networks:
      - dsbd-network

  grpc-server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: grpc-server
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_USER: myuser
      DB_PORT: 3306
      DB_PASSWORD: mypassword
      DB_NAME: dsbd_db
    networks:
      - dsbd-network
    ports:
      - "18072:18072"                    

  data-collector:
    build:
      context: .
      dockerfile: Dockerfile.datacollector
    container_name: data-collector
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_USER: myuser
      DB_PASSWORD: mypassword
      DB_NAME: dsbd_db
    networks:
      - dsbd-network

  cp_alertsystem:
    build:
      context: .
      dockerfile: Dockerfile.cp_alertsystem
    container_name: alertsystem
    environment:
      DB_HOST: db
      DB_USER: myuser
      DB_PASSWORD: mypassword
      DB_NAME: dsbd_db
    networks:
      - dsbd-network 
    restart: always
    
  c_alertnotifiersystem:
    build:
      context: .
      dockerfile: Dockerfile.c_alertnotifiersystem
    container_name: alertnotifiersystem
    depends_on:
      - cp_alertsystem
    environment:
      DB_HOST: db
      DB_USER: myuser
      DB_PASSWORD: mypassword
      DB_NAME: dsbd_db
    networks:
      - dsbd-network 

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - dsbd-network

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - dsbd-network

volumes:
  db_data:

networks:
  dsbd-network:
    driver: bridge
